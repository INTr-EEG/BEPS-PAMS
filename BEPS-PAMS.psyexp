<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2021.2.3">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expName, expInfo['ID'], expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'Audio': &quot;['Yes', 'No']&quot;, 'Debug': &quot;['No', 'Yes']&quot;, 'Show boxes': &quot;['No', 'Yes']&quot;}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="['resources/aud/BEPS-PAMS Intro.m4a', 'resources/imgs/slides/beps-intro.png', 'resources/imgs/slides/pams-intro.png', 'resources/imgs/slides/slide-02.png', 'resources/imgs/slides/slide-03.png', 'resources/imgs/slides/slide-04.png', 'resources/imgs/slides/slide-05.png', 'resources/imgs/slides/slide-06.png', 'resources/imgs/slides/slide-07.png', 'resources/imgs/slides/slide-09.png', 'resources/imgs/slides/slide-10.png', 'resources/imgs/slides/slide-11.png', 'resources/imgs/slides/slide-12.png', 'resources/imgs/slides/slide-13.png', 'resources/imgs/slides/slide-14.png', 'resources/imgs/slides/slide-15.png', 'resources/imgs/slides/slide-16.png', 'resources/imgs/slides/slide-17.png', 'resources/imgs/slides/slide-18.png', 'resources/imgs/slides/slide-19.png', 'resources/imgs/slides/slide-20.png', 'resources/imgs/slides/slide-21.png', 'resources/imgs/slides/slide-22.png', 'resources/imgs/slides/slide-23.png', 'resources/aud/BEPS Instructions.m4a', 'resources/aud/BEPS Q01.m4a', 'resources/aud/BEPS Q02.m4a', 'resources/aud/BEPS Q03.m4a', 'resources/aud/BEPS Q04.m4a', 'resources/aud/BEPS Q04a.m4a', 'resources/aud/BEPS Q05.m4a', 'resources/aud/BEPS Q06.m4a', 'resources/aud/BEPS Q07.m4a', 'resources/aud/BEPS Q08.m4a', 'resources/aud/PAMS Q01.m4a', 'resources/aud/PAMS Q02.m4a', 'resources/aud/PAMS Q03.m4a', 'resources/aud/PAMS Q04.m4a', 'resources/aud/PAMS Q05.m4a', 'resources/aud/PAMS Q06.m4a', 'resources/aud/PAMS Q07.m4a', 'resources/aud/PAMS Q08.m4a', 'resources/aud/PAMS Q09.m4a', 'resources/aud/PAMS Q10.m4a', 'resources/aud/PAMS Q11.m4a', 'resources/aud/PAMS Q12.m4a', 'resources/aud/PAMS Q13.m4a', 'resources/aud/PAMS Q14.m4a', 'resources/aud/PAMS Q15.m4a', 'resources/seqs/conditions.csv']" valType="list"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save hdf5 file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1512, 982]" valType="list"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[1,1,1]" valType="color"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="elAddress" updates="None" val="100.1.1.1" valType="str"/>
    <Param name="elDataFiltering" updates="None" val="FILTER_LEVEL_2" valType="str"/>
    <Param name="elLiveFiltering" updates="None" val="FILTER_LEVEL_OFF" valType="str"/>
    <Param name="elModel" updates="None" val="EYELINK 1000 DESKTOP" valType="str"/>
    <Param name="elPupilAlgorithm" updates="None" val="ELLIPSE_FIT" valType="str"/>
    <Param name="elPupilMeasure" updates="None" val="PUPIL_AREA" valType="str"/>
    <Param name="elSampleRate" updates="None" val="1000" valType="num"/>
    <Param name="elSimMode" updates="None" val="False" valType="bool"/>
    <Param name="elTrackEyes" updates="None" val="RIGHT_EYE" valType="str"/>
    <Param name="elTrackingMode" updates="None" val="PUPIL_CR_TRACKING" valType="str"/>
    <Param name="expName" updates="None" val="BEPS-PAMS" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="eyetracker" updates="None" val="None" valType="str"/>
    <Param name="gpAddress" updates="None" val="127.0.0.1" valType="str"/>
    <Param name="gpPort" updates="None" val="4242" valType="num"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
    <Param name="mgBlink" updates="None" val="('MIDDLE_BUTTON',)" valType="list"/>
    <Param name="mgMove" updates="None" val="CONTINUOUS" valType="str"/>
    <Param name="mgSaccade" updates="None" val="0.5" valType="num"/>
    <Param name="tbLicenseFile" updates="None" val="" valType="str"/>
    <Param name="tbModel" updates="None" val="" valType="str"/>
    <Param name="tbSampleRate" updates="None" val="60" valType="num"/>
    <Param name="tbSerialNo" updates="None" val="" valType="str"/>
  </Settings>
  <Routines>
    <Routine name="begin">
      <CodeComponent name="begin_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="&amp;#10;expVersion = &quot;2022.09.26&quot;&amp;#10;AUD_DIR = &quot;resources/aud&quot;&amp;#10;IMGS_DIR = &quot;resources/imgs&quot;&amp;#10;SLIDES_DIR = f&quot;{IMGS_DIR}/slides&quot;&amp;#10;SEQ_FILE = &quot;resources/seqs/conditions.csv&quot;&amp;#10;&amp;#10;#expInfo[&quot;Debug&quot;] = &quot;No&quot;&amp;#10;#expInfo[&quot;Audio&quot;] = &quot;Yes&quot;&amp;#10;SHOW_DEBUG = expInfo[&quot;Debug&quot;] == &quot;Yes&quot;&amp;#10;USE_AUDIO = expInfo[&quot;Audio&quot;] == &quot;Yes&quot;&amp;#10;SHOW_BOUND_BOX = expInfo[&quot;Show boxes&quot;] == &quot;Yes&quot;&amp;#10;&amp;#10;CLICK_BOX_OPACITY = 0.2 if SHOW_DEBUG else 0&amp;#10;BOUND_BOX_OPACITY = 1 if SHOW_BOUND_BOX else 0&amp;#10;&amp;#10;&quot;&quot;&quot;&amp;#10;Slides are 1052 x 745 pixels.&amp;#10;Positions and sizes of clickable areas are hard &amp;#10;coded, so changing this will break _everything_!&amp;#10;&amp;#10;&quot;&quot;&quot;&amp;#10;SLIDE_H = 0.7&amp;#10;SLIDE_W = SLIDE_H / 745 * 1052&amp;#10;SLIDE_SIZE = (SLIDE_W, SLIDE_H)&amp;#10;&amp;#10;## &quot;Next&quot; button at top-right&amp;#10;#NEXT_POS = (0.39, 0.265)&amp;#10;#NEXT_SIZE = (0.165, 0.075)&amp;#10;#NEXT = make_rect(&quot;next&quot;, NEXT_POS, NEXT_SIZE, CLICK_BOX_OPACITY)&amp;#10;NEXT_POS = (0.55, 0.315)&amp;#10;NEXT_SIZE = (0.270, 0.055) &amp;#10;NEXT = make_button(&quot;next&quot;, &quot;  Next&quot;, NEXT_POS, NEXT_SIZE)&amp;#10;&amp;#10;## &quot;Replay&quot; button at top-left&amp;#10;#REPLAY_POS = (-0.376, 0.265)&amp;#10;#REPLAY_SIZE = (0.165, 0.075)&amp;#10;#REPLAY = make_rect(&quot;replay&quot;, REPLAY_POS, REPLAY_SIZE, CLICK_BOX_OPACITY)&amp;#10;REPLAY_POS = (-0.596, 0.315)&amp;#10;REPLAY_SIZE = (0.270, 0.055)&amp;#10;REPLAY = make_button(&quot;replay&quot;, &quot;Replay&quot;, REPLAY_POS, REPLAY_SIZE)&amp;#10;&amp;#10;# For covering &quot;Next&quot; button&amp;#10;#COVER_SIZE = (0.17, 0.08)&amp;#10;#COVER = make_rect(&quot;cover&quot;, NEXT_POS, COVER_SIZE, None, &quot;white&quot;, &quot;white&quot;, 0)&amp;#10;COVER_SIZE = (0.252, 0.152)&amp;#10;COVER = make_rect(&quot;cover&quot;, NEXT_POS, COVER_SIZE, 1, &quot;white&quot;, &quot;white&quot;, 0, &quot;white&quot;)&amp;#10;&amp;#10;&amp;#10;REPLAY_IN_SLIDES = [&quot;slide-18&quot;,&quot;slide-19&quot;,&quot;slide-20&quot;,&quot;slide-22&quot;]&amp;#10;NEXT_IN_SLIDES = [&quot;slide-21&quot;,&quot;slide-23&quot;]&amp;#10;&amp;#10;# Global mouse&amp;#10;MOUSE = core.Mouse(win=win)&amp;#10;MOUSE_L = 0&amp;#10;MOUSE_L_prev = 0&amp;#10;&amp;#10;# Global sound&amp;#10;SOUND = None&amp;#10;&amp;#10;# For Q04/Q04a&amp;#10;previous_wrong = False&amp;#10;&amp;#10;all_cimgs = {&amp;#10;    &quot;slide-02&quot;: get_5umbrellas,&amp;#10;    &quot;slide-03&quot;: get_pattern1,&amp;#10;    &quot;slide-04&quot;: get_pattern2,&amp;#10;    &quot;slide-05&quot;: get_symmetry,&amp;#10;    &quot;slide-06&quot;: get_shapes,&amp;#10;    &quot;slide-07&quot;: get_cookies,&amp;#10;    &quot;slide-09&quot;: get_flowers,&amp;#10;    &quot;slide-10&quot;: get_yes_no,&amp;#10;    &quot;slide-11&quot;: get_red_apples1,&amp;#10;    &quot;slide-12&quot;: get_red_apples2,&amp;#10;    &quot;slide-13&quot;: get_9or6,&amp;#10;    &quot;slide-14&quot;: get_20or12,&amp;#10;    &quot;slide-15&quot;: get_5or8,&amp;#10;    &quot;slide-16&quot;: get_21or17,&amp;#10;    &quot;slide-17&quot;: get_num_pattern,&amp;#10;    &quot;slide-18&quot;: get_green_apples,&amp;#10;    &quot;slide-19&quot;: get_farm,&amp;#10;    &quot;slide-20&quot;: get_cows,&amp;#10;    &quot;slide-21&quot;: get_2plus2,&amp;#10;    &quot;slide-22&quot;: get_sweets,&amp;#10;    &quot;slide-23&quot;: get_3minus1,&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="expVersion = &quot;2022.09.26&quot;;&amp;#10;AUD_DIR = &quot;resources/aud&quot;;&amp;#10;IMGS_DIR = &quot;resources/imgs&quot;;&amp;#10;SLIDES_DIR = `${IMGS_DIR}/slides`;&amp;#10;SEQ_FILE = &quot;resources/seqs/conditions.csv&quot;;&amp;#10;SHOW_DEBUG = (expInfo[&quot;Debug&quot;] === &quot;Yes&quot;);&amp;#10;USE_AUDIO = (expInfo[&quot;Audio&quot;] === &quot;Yes&quot;);&amp;#10;SHOW_BOUND_BOX = (expInfo[&quot;Show boxes&quot;] === &quot;Yes&quot;);&amp;#10;CLICK_BOX_OPACITY = (SHOW_DEBUG ? 0.2 : 0);&amp;#10;BOUND_BOX_OPACITY = (SHOW_BOUND_BOX ? 1 : 0);&amp;#10;/*&amp;#10;Slides are 1052 x 745 pixels.&amp;#10;Positions and sizes of clickable areas are hard&amp;#10;coded, so changing this will break _everything_!&amp;#10;*/&amp;#10;SLIDE_H = 0.7;&amp;#10;SLIDE_W = ((SLIDE_H / 745) * 1052);&amp;#10;SLIDE_SIZE = [SLIDE_W, SLIDE_H];&amp;#10;NEXT_POS = [0.55, 0.315];&amp;#10;NEXT_SIZE = [0.27, 0.055];&amp;#10;NEXT = make_button(&quot;next&quot;, &quot;  Next&quot;, NEXT_POS, NEXT_SIZE);&amp;#10;REPLAY_POS = [(- 0.596), 0.315];&amp;#10;REPLAY_SIZE = [0.27, 0.055];&amp;#10;REPLAY = make_button(&quot;replay&quot;, &quot;Replay&quot;, REPLAY_POS, REPLAY_SIZE);&amp;#10;COVER_SIZE = [0.252, 0.152];&amp;#10;COVER = make_rect(&quot;cover&quot;, NEXT_POS, COVER_SIZE, 1, &quot;white&quot;, &quot;white&quot;, 0, &quot;white&quot;);&amp;#10;REPLAY_IN_SLIDES = [&quot;slide-18&quot;, &quot;slide-19&quot;, &quot;slide-20&quot;, &quot;slide-22&quot;];&amp;#10;NEXT_IN_SLIDES = [&quot;slide-21&quot;, &quot;slide-23&quot;];&amp;#10;MOUSE = new core.Mouse({&quot;win&quot;: psychoJS.window});&amp;#10;MOUSE_L = 0;&amp;#10;MOUSE_L_prev = 0;&amp;#10;SOUND = null;&amp;#10;previous_wrong = false;&amp;#10;all_cimgs = {&quot;slide-02&quot;: get_5umbrellas, &quot;slide-03&quot;: get_pattern1, &quot;slide-04&quot;: get_pattern2, &quot;slide-05&quot;: get_symmetry, &quot;slide-06&quot;: get_shapes, &quot;slide-07&quot;: get_cookies, &quot;slide-09&quot;: get_flowers, &quot;slide-10&quot;: get_yes_no, &quot;slide-11&quot;: get_red_apples1, &quot;slide-12&quot;: get_red_apples2, &quot;slide-13&quot;: get_9or6, &quot;slide-14&quot;: get_20or12, &quot;slide-15&quot;: get_5or8, &quot;slide-16&quot;: get_21or17, &quot;slide-17&quot;: get_num_pattern, &quot;slide-18&quot;: get_green_apples, &quot;slide-19&quot;: get_farm, &quot;slide-20&quot;: get_cows, &quot;slide-21&quot;: get_2plus2, &quot;slide-22&quot;: get_sweets, &quot;slide-23&quot;: get_3minus1};&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="begin_code" valType="code"/>
      </CodeComponent>
      <CodeComponent name="functions_g">
        <Param name="Before Experiment" updates="constant" val="&amp;#10;def make_sound(name, filepath):&amp;#10;    return sound.Sound(&amp;#10;        win=win,&amp;#10;        value=filepath,&amp;#10;        secs=-1,&amp;#10;        stereo=True,&amp;#10;        hamming=True,&amp;#10;        name=name&amp;#10;    )&amp;#10;    &amp;#10;def make_button(name, text, pos, size):&amp;#10;    return visual.ButtonStim(&amp;#10;        win=win, &amp;#10;        text=text,&amp;#10;    #    font=&quot;Arvo&quot;,&amp;#10;        pos=pos,&amp;#10;        letterHeight=0.05,&amp;#10;        size=size,&amp;#10;        borderWidth=0.005,&amp;#10;        fillColor=&quot;lightgrey&quot;,&amp;#10;        borderColor=&quot;darkgrey&quot;,&amp;#10;        color=&quot;black&quot;,&amp;#10;        colorSpace=&quot;rgb&quot;,&amp;#10;        opacity=None,&amp;#10;        bold=True,&amp;#10;        italic=False,&amp;#10;        padding=None,&amp;#10;        anchor=&quot;center&quot;,&amp;#10;        name=name&amp;#10;    )&amp;#10;&amp;#10;def make_img(name, file_name, pos, size, opacity):&amp;#10;    return visual.ImageStim(&amp;#10;        win=win,&amp;#10;        name=name,&amp;#10;        image=file_name,&amp;#10;        pos=pos,&amp;#10;        size=size,&amp;#10;        opacity=opacity&amp;#10;    )&amp;#10;&amp;#10;def make_slide(name, pos=(0, 0), size=SLIDE_SIZE):&amp;#10;    return make_img(&amp;#10;        name,&amp;#10;        f&quot;{SLIDES_DIR}/{name}.png&quot;,&amp;#10;        pos, size, 1&amp;#10;    )&amp;#10;&amp;#10;def make_rect(&amp;#10;    name, pos, size, opacity,&amp;#10;    lineColor,&amp;#10;    lineWidth=3,&amp;#10;    fillColor=None&amp;#10;):&amp;#10;    if fillColor is not None:&amp;#10;        fillColor = util.Color(fillColor)&amp;#10;    if lineColor is not None:&amp;#10;        lineColor = util.Color(lineColor)&amp;#10;    return visual.Rect(&amp;#10;        win=win,&amp;#10;        name=name,&amp;#10;        width=size[0],&amp;#10;        height=size[1],&amp;#10;        pos=pos,&amp;#10;        lineWidth=lineWidth,&amp;#10;        lineColor=lineColor,&amp;#10;        fillColor=fillColor,&amp;#10;        opacity=opacity&amp;#10;    )&amp;#10;&amp;#10;def make_boxes(names, xys, sizes, opacity=CLICK_BOX_OPACITY, lineColor=&quot;green&quot;):&amp;#10;    cimgs = []&amp;#10;    for i in range(len(names)):&amp;#10;        cimgs.append(make_rect(names[i], xys[i], sizes[i], opacity, lineColor))&amp;#10;    return cimgs&amp;#10;&amp;#10;def make_circle(&amp;#10;    name, pos, size,&amp;#10;    fillColor=&quot;black&quot;,&amp;#10;    lineColor=&quot;black&quot;,&amp;#10;    lineWidth=3,&amp;#10;    opacity=1&amp;#10;):&amp;#10;    if lineColor is not None:&amp;#10;        lineColor = util.Color(lineColor)&amp;#10;    if fillColor is not None:&amp;#10;        fillColor = util.Color(fillColor)&amp;#10;    return visual.Polygon(&amp;#10;        win=win,&amp;#10;        name=name,&amp;#10;        edges=360,&amp;#10;        size=size,&amp;#10;        pos=pos,&amp;#10;        lineWidth=lineWidth,&amp;#10;        lineColor=lineColor,&amp;#10;        fillColor=fillColor,&amp;#10;        opacity=opacity&amp;#10;    )&amp;#10;&amp;#10;def make_radio0(name, pos):&amp;#10;    return make_circle(name, pos, (0.03, 0.03), None, &quot;black&quot;)&amp;#10;&amp;#10;def make_radio1(name, pos):&amp;#10;    return make_circle(name, pos, (0.023, 0.023), &quot;black&quot;, None, 0)&amp;#10;&amp;#10;def find_min_y(cimgs):&amp;#10;    min_y = 0.5&amp;#10;    for cimg in cimgs:&amp;#10;        y = cimg.pos[1] - (cimg.height / 2)&amp;#10;        if min_y &gt; y:&amp;#10;            min_y = y&amp;#10;    return min_y&amp;#10;&amp;#10;def make_radios(func, cimgs, res=[], offset=-0.05):&amp;#10;    min_y = find_min_y(cimgs)&amp;#10;    for cimg in cimgs:&amp;#10;        radio_y = min_y + offset&amp;#10;        res.append(func(cimg.name, (cimg.pos[0], radio_y)))&amp;#10;    return res&amp;#10;" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="function make_sound(name, filepath) {&amp;#10;    return new sound.Sound({&quot;win&quot;: psychoJS.window, &quot;value&quot;: filepath, &quot;secs&quot;: (- 1), &quot;stereo&quot;: true, &quot;hamming&quot;: true, &quot;name&quot;: name});&amp;#10;}&amp;#10;function make_button(name, text, pos, size) {&amp;#10;    return new visual.ButtonStim({&quot;win&quot;: psychoJS.window, &quot;text&quot;: text, &quot;pos&quot;: pos, &quot;letterHeight&quot;: 0.05, &quot;size&quot;: size, &quot;borderWidth&quot;: 0.005, &quot;fillColor&quot;: &quot;lightgrey&quot;, &quot;borderColor&quot;: &quot;darkgrey&quot;, &quot;color&quot;: &quot;black&quot;, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;bold&quot;: true, &quot;italic&quot;: false, &quot;padding&quot;: null, &quot;anchor&quot;: &quot;center&quot;, &quot;name&quot;: name});&amp;#10;}&amp;#10;function make_img(name, file_name, pos, size, opacity) {&amp;#10;    return new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: name, &quot;image&quot;: file_name, &quot;pos&quot;: pos, &quot;size&quot;: size, &quot;opacity&quot;: opacity});&amp;#10;}&amp;#10;function make_slide(name, pos = [0, 0], size = SLIDE_SIZE) {&amp;#10;    return make_img(name, `${SLIDES_DIR}/${name}.png`, pos, size, 1);&amp;#10;}&amp;#10;function make_rect(name, pos, size, opacity, lineColor, lineWidth = 3, fillColor = null) {&amp;#10;    if ((fillColor !== null)) {&amp;#10;        fillColor = new util.Color(fillColor);&amp;#10;    }&amp;#10;    if ((lineColor !== null)) {&amp;#10;        lineColor = new util.Color(lineColor);&amp;#10;    }&amp;#10;    return new visual.Rect({&quot;win&quot;: psychoJS.window, &quot;name&quot;: name, &quot;width&quot;: size[0], &quot;height&quot;: size[1], &quot;pos&quot;: pos, &quot;lineWidth&quot;: lineWidth, &quot;lineColor&quot;: lineColor, &quot;fillColor&quot;: fillColor, &quot;opacity&quot;: opacity});&amp;#10;}&amp;#10;function make_boxes(names, xys, sizes, opacity = CLICK_BOX_OPACITY, lineColor = &quot;green&quot;) {&amp;#10;    var cimgs;&amp;#10;    cimgs = [];&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(names.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        cimgs.push(make_rect(names[i], xys[i], sizes[i], opacity, lineColor));&amp;#10;    }&amp;#10;    return cimgs;&amp;#10;}&amp;#10;function make_circle(name, pos, size, fillColor = &quot;black&quot;, lineColor = &quot;black&quot;, lineWidth = 3, opacity = 1) {&amp;#10;    if ((lineColor !== null)) {&amp;#10;        lineColor = new util.Color(lineColor);&amp;#10;    }&amp;#10;    if ((fillColor !== null)) {&amp;#10;        fillColor = new util.Color(fillColor);&amp;#10;    }&amp;#10;    return new visual.Polygon({&quot;win&quot;: psychoJS.window, &quot;name&quot;: name, &quot;edges&quot;: 360, &quot;size&quot;: size, &quot;pos&quot;: pos, &quot;lineWidth&quot;: lineWidth, &quot;lineColor&quot;: lineColor, &quot;fillColor&quot;: fillColor, &quot;opacity&quot;: opacity});&amp;#10;}&amp;#10;function make_radio0(name, pos) {&amp;#10;    return make_circle(name, pos, [0.03, 0.03], null, &quot;black&quot;);&amp;#10;}&amp;#10;function make_radio1(name, pos) {&amp;#10;    return make_circle(name, pos, [0.023, 0.023], &quot;black&quot;, null, 0);&amp;#10;}&amp;#10;function find_min_y(cimgs) {&amp;#10;    var min_y, y;&amp;#10;    min_y = 0.5;&amp;#10;    for (var cimg, _pj_c = 0, _pj_a = cimgs, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        cimg = _pj_a[_pj_c];&amp;#10;        y = (cimg.pos[1] - (cimg.height / 2));&amp;#10;        if ((min_y &gt; y)) {&amp;#10;            min_y = y;&amp;#10;        }&amp;#10;    }&amp;#10;    return min_y;&amp;#10;}&amp;#10;function make_radios(func, cimgs, res = [], offset = (- 0.05)) {&amp;#10;    var min_y, radio_y;&amp;#10;    min_y = find_min_y(cimgs);&amp;#10;    for (var cimg, _pj_c = 0, _pj_a = cimgs, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        cimg = _pj_a[_pj_c];&amp;#10;        radio_y = (min_y + offset);&amp;#10;        res.push(func(cimg.name, [cimg.pos[0], radio_y]));&amp;#10;    }&amp;#10;    return res;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="functions_g" valType="code"/>
      </CodeComponent>
      <CodeComponent name="specs_BEPS">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="&amp;#10;# BEPS&amp;#10;&amp;#10;def get_5umbrellas():&amp;#10;    # Slide 02&amp;#10;    names = (&quot;orange&quot;, &quot;white&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;red&quot;)&amp;#10;    y0 = 0.175&amp;#10;    y1 = y0 - 0.35&amp;#10;    xys = [(-0.305, y0), (0, y0), (0.305, y0), (-0.185, y1), (0.1615, y1)]&amp;#10;    sizes = []&amp;#10;    for i in range(len(names)):&amp;#10;        sizes.append((0.245, 0.21))&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_pattern1():&amp;#10;    # Slide 03&amp;#10;    names = (&quot;star&quot;, &quot;bread&quot;, &quot;watermelon&quot;, &quot;pizza&quot;)&amp;#10;    y0 = -0.195&amp;#10;    xys = [(-0.335, y0), (-0.105, y0), (0.13, y0), (0.345, y0)]&amp;#10;    sizes = []&amp;#10;    for i in range(len(names)):&amp;#10;        sizes.append((0.14, 0.14))&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_pattern2():&amp;#10;    # Slide 04&amp;#10;    names = (&quot;ice_cream&quot;, &quot;basketball&quot;, &quot;car&quot;, &quot;beachball&quot;)&amp;#10;    y0 = -0.189&amp;#10;    xys = [(-0.351, y0 + 0.012), (-0.134, y0), (0.097, y0), (0.334, y0)]&amp;#10;    sizes = [(0.08, 0.205), (0.13, 0.13), (0.18, 0.1), (0.13, 0.13)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_symmetry():&amp;#10;    # Slide 05&amp;#10;    names = (&quot;burger&quot;, &quot;sun&quot;, &quot;cloud&quot;, &quot;tree&quot;)&amp;#10;    y0 = -0.135&amp;#10;    xys = [(-0.357, y0), (-0.118, y0), (0.128, y0 + 0.004), (0.37, y0 + 0.006)]&amp;#10;    sizes = [(0.185, 0.185), (0.18, 0.18), (0.22, 0.16), (0.205, 0.215)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_shapes():&amp;#10;    # Slide 06&amp;#10;    names = (&quot;rectangle&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;square&quot;)&amp;#10;    y0 = -0.183&amp;#10;    xys = [(-0.328, y0 - 0.006), (-0.078, y0 + 0.002), (0.144, y0), (0.36, y0)]&amp;#10;    sizes = [(0.248, 0.1), (0.152, 0.132), (0.132, 0.132), (0.126, 0.126)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_cookies():&amp;#10;    # Slide 07&amp;#10;    names = (&quot;cookie1&quot;, &quot;cookie2&quot;, &quot;cookie3&quot;, &quot;cookie4&quot;)&amp;#10;    y0 = -0.146&amp;#10;    xys = [(-0.351, y0 +0.01), (-0.122, y0), (0.111, y0 + 0.01), (0.362, y0)]&amp;#10;    sizes = [(0.205, 0.205), (0.17, 0.17), (0.222, 0.22), (0.198, 0.195)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="function get_5umbrellas() {&amp;#10;    var names, sizes, xys, y0, y1;&amp;#10;    names = [&quot;orange&quot;, &quot;white&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;red&quot;];&amp;#10;    y0 = 0.175;&amp;#10;    y1 = (y0 - 0.35);&amp;#10;    xys = [[(- 0.305), y0], [0, y0], [0.305, y0], [(- 0.185), y1], [0.1615, y1]];&amp;#10;    sizes = [];&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(names.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        sizes.push([0.245, 0.21]);&amp;#10;    }&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_pattern1() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;star&quot;, &quot;bread&quot;, &quot;watermelon&quot;, &quot;pizza&quot;];&amp;#10;    y0 = (- 0.195);&amp;#10;    xys = [[(- 0.335), y0], [(- 0.105), y0], [0.13, y0], [0.345, y0]];&amp;#10;    sizes = [];&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(names.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        sizes.push([0.14, 0.14]);&amp;#10;    }&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_pattern2() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;ice_cream&quot;, &quot;basketball&quot;, &quot;car&quot;, &quot;beachball&quot;];&amp;#10;    y0 = (- 0.189);&amp;#10;    xys = [[(- 0.351), (y0 + 0.012)], [(- 0.134), y0], [0.097, y0], [0.334, y0]];&amp;#10;    sizes = [[0.08, 0.205], [0.13, 0.13], [0.18, 0.1], [0.13, 0.13]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_symmetry() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;burger&quot;, &quot;sun&quot;, &quot;cloud&quot;, &quot;tree&quot;];&amp;#10;    y0 = (- 0.135);&amp;#10;    xys = [[(- 0.357), y0], [(- 0.118), y0], [0.128, (y0 + 0.004)], [0.37, (y0 + 0.006)]];&amp;#10;    sizes = [[0.185, 0.185], [0.18, 0.18], [0.22, 0.16], [0.205, 0.215]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_shapes() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;rectangle&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;square&quot;];&amp;#10;    y0 = (- 0.183);&amp;#10;    xys = [[(- 0.328), (y0 - 0.006)], [(- 0.078), (y0 + 0.002)], [0.144, y0], [0.36, y0]];&amp;#10;    sizes = [[0.248, 0.1], [0.152, 0.132], [0.132, 0.132], [0.126, 0.126]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_cookies() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;cookie1&quot;, &quot;cookie2&quot;, &quot;cookie3&quot;, &quot;cookie4&quot;];&amp;#10;    y0 = (- 0.146);&amp;#10;    xys = [[(- 0.351), (y0 + 0.01)], [(- 0.122), y0], [0.111, (y0 + 0.01)], [0.362, y0]];&amp;#10;    sizes = [[0.205, 0.205], [0.17, 0.17], [0.222, 0.22], [0.198, 0.195]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="specs_BEPS" valType="code"/>
      </CodeComponent>
      <CodeComponent name="specs_PAMS">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="&amp;#10;# PAMS&amp;#10;&amp;#10;def get_flowers():&amp;#10;    # Slide 09&amp;#10;    names = (&quot;flowers3&quot;, &quot;flowers4&quot;, &quot;flowers5&quot;, &quot;flowers1&quot;)&amp;#10;    y0 = -0.133&amp;#10;    xys = [(-0.362, y0), (-0.119, y0 + 0.029), (0.13, y0 + 0.032), (0.367, y0 + 0.008)]&amp;#10;    sizes = [(0.19, 0.06), (0.13, 0.131), (0.2, 0.125), (0.082, 0.086)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_yes_no():&amp;#10;    # Slide 10&amp;#10;    names = (&quot;yes&quot;, &quot;no&quot;)&amp;#10;    y0 = -0.256&amp;#10;    xys = [(-0.284, y0), (0.292, y0)]&amp;#10;    sizes = [(0.262, 0.09), (0.262, 0.09)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_red_apples1():&amp;#10;    # Slide 11&amp;#10;    names = (&quot;10&quot;, &quot;12&quot;, &quot;8&quot;, &quot;13&quot;)&amp;#10;    y0 = -0.199&amp;#10;    xys = [(-0.374, y0 + 0.003), (-0.115, y0), (0.123, y0), (0.365, y0)]&amp;#10;    sizes = []&amp;#10;    for i in range(len(names)):&amp;#10;        sizes.append((0.175, 0.135))&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_red_apples2():&amp;#10;    # Slide 12&amp;#10;    names = (&quot;7&quot;, &quot;9&quot;, &quot;10&quot;, &quot;8&quot;)&amp;#10;    y0 = -0.199&amp;#10;    xys = [(-0.367, y0 + 0.003), (-0.113, y0), (0.126, y0), (0.368, y0 + 0.003)]&amp;#10;    sizes = [(0.165, 0.135), (0.17, 0.135), (0.17, 0.135), (0.16, 0.135)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_9or6():&amp;#10;    # Slide 13&amp;#10;    names = (&quot;9&quot;, &quot;6&quot;)&amp;#10;    y0 = 0.021&amp;#10;    w0 = 0.18&amp;#10;    h0 = 0.27&amp;#10;    xys = [(-0.302, y0), (0.297, y0)]&amp;#10;    sizes = [(w0, h0), (w0, h0)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_20or12():&amp;#10;    # Slide 14&amp;#10;    names = (&quot;20&quot;, &quot;12&quot;)&amp;#10;    y0 = 0.001&amp;#10;    w0 = 0.33&amp;#10;    h0 = 0.23&amp;#10;    xys = [(-0.252, y0), (0.26, y0)]&amp;#10;    sizes = [(w0, h0), (w0, h0)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_5or8():&amp;#10;    # Slide 15&amp;#10;    names = (&quot;5&quot;, &quot;8&quot;)&amp;#10;    y0 = 0.021&amp;#10;    w0 = 0.18&amp;#10;    h0 = 0.27&amp;#10;    xys = [(-0.307, y0), (0.296, y0)]&amp;#10;    sizes = [(w0, h0), (w0, h0)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_21or17():&amp;#10;    # Slide 16&amp;#10;    names = (&quot;21&quot;, &quot;17&quot;)&amp;#10;    y0 = -0.014&amp;#10;    w0 = 0.32&amp;#10;    h0 = 0.225&amp;#10;    xys = [(-0.268, y0), (0.27, y0)]&amp;#10;    sizes = [(w0, h0), (w0, h0)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_num_pattern():&amp;#10;    # Slide 17&amp;#10;    names = (&quot;12&quot;, &quot;9&quot;, &quot;11&quot;, &quot;10&quot;)&amp;#10;    y0 = -0.199&amp;#10;    xys = [(-0.362, y0 + 0.003), (-0.113, y0), (0.126, y0), (0.368, y0 + 0.003)]&amp;#10;    sizes = [(0.153, 0.135), (0.17, 0.135), (0.17, 0.135), (0.16, 0.135)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_green_apples():&amp;#10;    # Slide 18&amp;#10;    names = (&quot;2&quot;, &quot;1&quot;, &quot;4&quot;, &quot;3&quot;)&amp;#10;    y0 = -0.199&amp;#10;    xys = [(-0.362, y0 + 0.003), (-0.113, y0), (0.126, y0), (0.368, y0 + 0.003)]&amp;#10;    sizes = [(0.153, 0.135), (0.17, 0.135), (0.17, 0.135), (0.16, 0.135)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_farm():&amp;#10;    # Slide 19&amp;#10;    names = (&quot;2&quot;, &quot;4&quot;, &quot;1&quot;, &quot;3&quot;)&amp;#10;    x0 = 0.002&amp;#10;    y0 = -0.234&amp;#10;    xys = [(x0 - 0.362, y0 + 0.003), (x0 - 0.113, y0), (x0 + 0.126, y0), (x0 + 0.368, y0 + 0.003)]&amp;#10;    sizes = [(0.153, 0.135), (0.17, 0.135), (0.17, 0.135), (0.16, 0.135)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_cows():&amp;#10;    # Slide 20&amp;#10;    names = (&quot;6&quot;, &quot;4&quot;, &quot;5&quot;, &quot;2&quot;)&amp;#10;    x0 = 0.002&amp;#10;    y0 = -0.234&amp;#10;    xys = [(x0 - 0.362, y0 + 0.003), (x0 - 0.113, y0), (x0 + 0.126, y0), (x0 + 0.368, y0 + 0.003)]&amp;#10;    sizes = [(0.153, 0.135), (0.17, 0.135), (0.17, 0.135), (0.16, 0.135)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_2plus2():&amp;#10;    # Slide 21&amp;#10;    names = (&quot;3&quot;, &quot;0&quot;, &quot;2&quot;, &quot;4&quot;)&amp;#10;    x0 = 0.002&amp;#10;    y0 = -0.234&amp;#10;    xys = [(x0 - 0.362, y0 + 0.003), (x0 - 0.113, y0), (x0 + 0.126, y0), (x0 + 0.368, y0 + 0.003)]&amp;#10;    sizes = [(0.153, 0.135), (0.17, 0.135), (0.17, 0.135), (0.16, 0.135)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_sweets():&amp;#10;    # Slide 22&amp;#10;    names = (&quot;2&quot;, &quot;7&quot;, &quot;5&quot;, &quot;3&quot;)&amp;#10;    x0 = 0.002&amp;#10;    y0 = -0.234&amp;#10;    xys = [(x0 - 0.362, y0 + 0.003), (x0 - 0.113, y0), (x0 + 0.126, y0), (x0 + 0.368, y0 + 0.003)]&amp;#10;    sizes = [(0.153, 0.135), (0.17, 0.135), (0.17, 0.135), (0.16, 0.135)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_3minus1():&amp;#10;    # Slide 23&amp;#10;    names = (&quot;1&quot;, &quot;3&quot;, &quot;2&quot;, &quot;4&quot;)&amp;#10;    x0 = 0.002&amp;#10;    y0 = -0.234&amp;#10;    xys = [(x0 - 0.362, y0 + 0.003), (x0 - 0.113, y0), (x0 + 0.126, y0), (x0 + 0.368, y0 + 0.003)]&amp;#10;    sizes = [(0.153, 0.135), (0.17, 0.135), (0.17, 0.135), (0.16, 0.135)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="function get_flowers() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;flowers3&quot;, &quot;flowers4&quot;, &quot;flowers5&quot;, &quot;flowers1&quot;];&amp;#10;    y0 = (- 0.133);&amp;#10;    xys = [[(- 0.362), y0], [(- 0.119), (y0 + 0.029)], [0.13, (y0 + 0.032)], [0.367, (y0 + 0.008)]];&amp;#10;    sizes = [[0.19, 0.06], [0.13, 0.131], [0.2, 0.125], [0.082, 0.086]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_yes_no() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;yes&quot;, &quot;no&quot;];&amp;#10;    y0 = (- 0.256);&amp;#10;    xys = [[(- 0.284), y0], [0.292, y0]];&amp;#10;    sizes = [[0.262, 0.09], [0.262, 0.09]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_red_apples1() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;10&quot;, &quot;12&quot;, &quot;8&quot;, &quot;13&quot;];&amp;#10;    y0 = (- 0.199);&amp;#10;    xys = [[(- 0.374), (y0 + 0.003)], [(- 0.115), y0], [0.123, y0], [0.365, y0]];&amp;#10;    sizes = [];&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(names.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        sizes.push([0.175, 0.135]);&amp;#10;    }&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_red_apples2() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;7&quot;, &quot;9&quot;, &quot;10&quot;, &quot;8&quot;];&amp;#10;    y0 = (- 0.199);&amp;#10;    xys = [[(- 0.367), (y0 + 0.003)], [(- 0.113), y0], [0.126, y0], [0.368, (y0 + 0.003)]];&amp;#10;    sizes = [[0.165, 0.135], [0.17, 0.135], [0.17, 0.135], [0.16, 0.135]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_9or6() {&amp;#10;    var h0, names, sizes, w0, xys, y0;&amp;#10;    names = [&quot;9&quot;, &quot;6&quot;];&amp;#10;    y0 = 0.021;&amp;#10;    w0 = 0.18;&amp;#10;    h0 = 0.27;&amp;#10;    xys = [[(- 0.302), y0], [0.297, y0]];&amp;#10;    sizes = [[w0, h0], [w0, h0]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_20or12() {&amp;#10;    var h0, names, sizes, w0, xys, y0;&amp;#10;    names = [&quot;20&quot;, &quot;12&quot;];&amp;#10;    y0 = 0.001;&amp;#10;    w0 = 0.33;&amp;#10;    h0 = 0.23;&amp;#10;    xys = [[(- 0.252), y0], [0.26, y0]];&amp;#10;    sizes = [[w0, h0], [w0, h0]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_5or8() {&amp;#10;    var h0, names, sizes, w0, xys, y0;&amp;#10;    names = [&quot;5&quot;, &quot;8&quot;];&amp;#10;    y0 = 0.021;&amp;#10;    w0 = 0.18;&amp;#10;    h0 = 0.27;&amp;#10;    xys = [[(- 0.307), y0], [0.296, y0]];&amp;#10;    sizes = [[w0, h0], [w0, h0]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_21or17() {&amp;#10;    var h0, names, sizes, w0, xys, y0;&amp;#10;    names = [&quot;21&quot;, &quot;17&quot;];&amp;#10;    y0 = (- 0.014);&amp;#10;    w0 = 0.32;&amp;#10;    h0 = 0.225;&amp;#10;    xys = [[(- 0.268), y0], [0.27, y0]];&amp;#10;    sizes = [[w0, h0], [w0, h0]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_num_pattern() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;12&quot;, &quot;9&quot;, &quot;11&quot;, &quot;10&quot;];&amp;#10;    y0 = (- 0.199);&amp;#10;    xys = [[(- 0.362), (y0 + 0.003)], [(- 0.113), y0], [0.126, y0], [0.368, (y0 + 0.003)]];&amp;#10;    sizes = [[0.153, 0.135], [0.17, 0.135], [0.17, 0.135], [0.16, 0.135]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_green_apples() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;2&quot;, &quot;1&quot;, &quot;4&quot;, &quot;3&quot;];&amp;#10;    y0 = (- 0.199);&amp;#10;    xys = [[(- 0.362), (y0 + 0.003)], [(- 0.113), y0], [0.126, y0], [0.368, (y0 + 0.003)]];&amp;#10;    sizes = [[0.153, 0.135], [0.17, 0.135], [0.17, 0.135], [0.16, 0.135]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_farm() {&amp;#10;    var names, sizes, x0, xys, y0;&amp;#10;    names = [&quot;2&quot;, &quot;4&quot;, &quot;1&quot;, &quot;3&quot;];&amp;#10;    x0 = 0.002;&amp;#10;    y0 = (- 0.234);&amp;#10;    xys = [[(x0 - 0.362), (y0 + 0.003)], [(x0 - 0.113), y0], [(x0 + 0.126), y0], [(x0 + 0.368), (y0 + 0.003)]];&amp;#10;    sizes = [[0.153, 0.135], [0.17, 0.135], [0.17, 0.135], [0.16, 0.135]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_cows() {&amp;#10;    var names, sizes, x0, xys, y0;&amp;#10;    names = [&quot;6&quot;, &quot;4&quot;, &quot;5&quot;, &quot;2&quot;];&amp;#10;    x0 = 0.002;&amp;#10;    y0 = (- 0.234);&amp;#10;    xys = [[(x0 - 0.362), (y0 + 0.003)], [(x0 - 0.113), y0], [(x0 + 0.126), y0], [(x0 + 0.368), (y0 + 0.003)]];&amp;#10;    sizes = [[0.153, 0.135], [0.17, 0.135], [0.17, 0.135], [0.16, 0.135]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_2plus2() {&amp;#10;    var names, sizes, x0, xys, y0;&amp;#10;    names = [&quot;3&quot;, &quot;0&quot;, &quot;2&quot;, &quot;4&quot;];&amp;#10;    x0 = 0.002;&amp;#10;    y0 = (- 0.234);&amp;#10;    xys = [[(x0 - 0.362), (y0 + 0.003)], [(x0 - 0.113), y0], [(x0 + 0.126), y0], [(x0 + 0.368), (y0 + 0.003)]];&amp;#10;    sizes = [[0.153, 0.135], [0.17, 0.135], [0.17, 0.135], [0.16, 0.135]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_sweets() {&amp;#10;    var names, sizes, x0, xys, y0;&amp;#10;    names = [&quot;2&quot;, &quot;7&quot;, &quot;5&quot;, &quot;3&quot;];&amp;#10;    x0 = 0.002;&amp;#10;    y0 = (- 0.234);&amp;#10;    xys = [[(x0 - 0.362), (y0 + 0.003)], [(x0 - 0.113), y0], [(x0 + 0.126), y0], [(x0 + 0.368), (y0 + 0.003)]];&amp;#10;    sizes = [[0.153, 0.135], [0.17, 0.135], [0.17, 0.135], [0.16, 0.135]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_3minus1() {&amp;#10;    var names, sizes, x0, xys, y0;&amp;#10;    names = [&quot;1&quot;, &quot;3&quot;, &quot;2&quot;, &quot;4&quot;];&amp;#10;    x0 = 0.002;&amp;#10;    y0 = (- 0.234);&amp;#10;    xys = [[(x0 - 0.362), (y0 + 0.003)], [(x0 - 0.113), y0], [(x0 + 0.126), y0], [(x0 + 0.368), (y0 + 0.003)]];&amp;#10;    sizes = [[0.153, 0.135], [0.17, 0.135], [0.17, 0.135], [0.16, 0.135]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="specs_PAMS" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="pams_intro">
      <CodeComponent name="p_intro_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# &quot;Next&quot; button at top-right&amp;#10;#NEXT_R_POS = (0.39, 0.285)&amp;#10;#NEXT_R_SIZE = (0.165, 0.075)&amp;#10;&amp;#10;NEXT_R = make_rect(&quot;next&quot;, NEXT_R_POS, NEXT_R_SIZE, CLICK_BOX_OPACITY)&amp;#10;&amp;#10;# For covering &quot;Next&quot; button&amp;#10;#COVER_SIZE = (0.17, 0.08)&amp;#10;#COVER = make_rect(&quot;cover&quot;, NEXT_POS, COVER_SIZE, None, &quot;white&quot;, 0, &quot;white&quot;)" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="NEXT_R = make_rect(&quot;next&quot;, NEXT_R_POS, NEXT_R_SIZE, CLICK_BOX_OPACITY);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="slide = make_slide(`pams-intro`);&amp;#10;slide.autoDraw = true;&amp;#10;NEXT_R.autoDraw = true;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;slide = make_slide(f&quot;pams-intro&quot;)&amp;#10;slide.autoDraw = True&amp;#10;&amp;#10;NEXT_R.autoDraw = True&amp;#10;#COVER.autoDraw = True&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="&amp;#10;MOUSE_L = MOUSE.getPressed()[0]&amp;#10;if MOUSE_L_prev != MOUSE_L:&amp;#10;    MOUSE_L_prev = MOUSE_L&amp;#10;    if MOUSE_L == 1 and NEXT_R.contains(MOUSE):&amp;#10;        continueRoutine = False&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="MOUSE_L = MOUSE.getPressed()[0];&amp;#10;if ((MOUSE_L_prev !== MOUSE_L)) {&amp;#10;    MOUSE_L_prev = MOUSE_L;&amp;#10;    if (((MOUSE_L === 1) &amp;&amp; NEXT_R.contains(MOUSE))) {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="slide.autoDraw = false;&amp;#10;NEXT_R.autoDraw = false;&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;slide.autoDraw = False&amp;#10;NEXT_R.autoDraw = False&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="p_intro_code" valType="code"/>
      </CodeComponent>
      <TextComponent name="p_intro_text">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="num"/>
        <Param name="name" updates="None" val="p_intro_text" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
    <Routine name="beps_intro">
      <CodeComponent name="b_intro_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# &quot;Next&quot; button at top-right&amp;#10;NEXT_R_POS = (0.40, 0.285)&amp;#10;NEXT_R_SIZE = (0.165, 0.075)&amp;#10;NEXT_R = make_rect(&quot;next&quot;, NEXT_R_POS, NEXT_R_SIZE, CLICK_BOX_OPACITY)&amp;#10;&amp;#10; #For covering &quot;Next&quot; button&amp;#10;COVER_SIZE = (0.17, 0.08)&amp;#10;COVER = make_rect(&quot;cover&quot;, NEXT_R_POS, COVER_SIZE, None, &quot;white&quot;, 0, &quot;white&quot;)" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="NEXT_R_POS = [0.4, 0.285];&amp;#10;NEXT_R_SIZE = [0.165, 0.075];&amp;#10;NEXT_R = make_rect(&quot;next&quot;, NEXT_R_POS, NEXT_R_SIZE, CLICK_BOX_OPACITY);&amp;#10;COVER_SIZE = [0.17, 0.08];&amp;#10;COVER = make_rect(&quot;cover&quot;, NEXT_R_POS, COVER_SIZE, null, &quot;white&quot;, 0, &quot;white&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="slide = make_slide(`beps-intro`);&amp;#10;slide.autoDraw = true;&amp;#10;NEXT_R.autoDraw = true;&amp;#10;COVER.autoDraw = true;&amp;#10;if (USE_AUDIO) {&amp;#10;    aud_file = `${AUD_DIR}/BEPS-PAMS Intro.m4a`;&amp;#10;    SOUND = make_sound(&quot;BEPS-PAMS Intro&quot;, aud_file);&amp;#10;    SOUND_DUR = SOUND.getDuration();&amp;#10;    SOUND_START = t;&amp;#10;    SOUND.play();&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;slide = make_slide(f&quot;beps-intro&quot;)&amp;#10;slide.autoDraw = True&amp;#10;&amp;#10;NEXT_R.autoDraw = True&amp;#10;COVER.autoDraw = True&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    aud_file = f&quot;{AUD_DIR}/BEPS-PAMS Intro.m4a&quot;&amp;#10;    SOUND = make_sound(&quot;BEPS-PAMS Intro&quot;, aud_file)&amp;#10;    SOUND_DUR = SOUND.getDuration()&amp;#10;    SOUND_START = t&amp;#10;    SOUND.play()&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="&amp;#10;MOUSE_L = MOUSE.getPressed()[0]&amp;#10;if MOUSE_L_prev != MOUSE_L:&amp;#10;    MOUSE_L_prev = MOUSE_L&amp;#10;    if MOUSE_L == 1 and NEXT_R.contains(MOUSE):&amp;#10;        continueRoutine = False&amp;#10;&amp;#10;&amp;#10;if t - SOUND_START &gt;= SOUND_DUR / 10*9:&amp;#10;        COVER.autoDraw = False" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="MOUSE_L = MOUSE.getPressed()[0];&amp;#10;if ((MOUSE_L_prev !== MOUSE_L)) {&amp;#10;    MOUSE_L_prev = MOUSE_L;&amp;#10;    if (((MOUSE_L === 1) &amp;&amp; NEXT_R.contains(MOUSE))) {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;if (((t - SOUND_START) &gt;= ((SOUND_DUR / 10) * 9))) {&amp;#10;    COVER.autoDraw = false;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="slide.autoDraw = false;&amp;#10;NEXT_R.autoDraw = false;&amp;#10;COVER.autoDraw = false;&amp;#10;if (USE_AUDIO) {&amp;#10;    SOUND.stop();&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;slide.autoDraw = False&amp;#10;NEXT_R.autoDraw = False&amp;#10;COVER.autoDraw = False&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    SOUND.stop()&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="b_intro_code" valType="code"/>
      </CodeComponent>
      <TextComponent name="b_intro_text">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="num"/>
        <Param name="name" updates="None" val="b_intro_text" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
    <Routine name="beps_trial">
      <CodeComponent name="trial_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;expVersion&quot;, expVersion);&amp;#10;cimgs = [];&amp;#10;cimg_names = [];&amp;#10;response = null;&amp;#10;has_responded = false;&amp;#10;RESPONSE_TIME = null;&amp;#10;slide_num = slideNum;&amp;#10;qn_num = qnNum;&amp;#10;if ((((taskName === &quot;BEPS&quot;) &amp;&amp; (qn_num === &quot;Q04a&quot;)) &amp;&amp; (! previous_wrong))) {&amp;#10;    previous_wrong = false;&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;slide = make_slide(slide_num);&amp;#10;slide.autoDraw = true;&amp;#10;cimgs = all_cimgs[slide_num]();&amp;#10;radio0s = [];&amp;#10;radio1s = [];&amp;#10;if ((slide_num === &quot;slide-02&quot;)) {&amp;#10;    radio0s = make_radios(make_radio0, cimgs.slice(0, 3), radio0s);&amp;#10;    radio0s = make_radios(make_radio0, cimgs.slice(3), radio0s);&amp;#10;    radio1s = make_radios(make_radio1, cimgs.slice(0, 3), radio1s);&amp;#10;    radio1s = make_radios(make_radio1, cimgs.slice(3), radio1s);&amp;#10;} else {&amp;#10;    radio0s = make_radios(make_radio0, cimgs, radio0s);&amp;#10;    radio1s = make_radios(make_radio1, cimgs, radio1s);&amp;#10;}&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(cimgs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    cimgs[i].opacity = CLICK_BOX_OPACITY;&amp;#10;    cimgs[i].autoDraw = true;&amp;#10;    radio0s[i].autoDraw = true;&amp;#10;}&amp;#10;if (USE_AUDIO) {&amp;#10;    if (((taskName === &quot;BEPS&quot;) &amp;&amp; (qn_num === &quot;Q01&quot;))) {&amp;#10;        aud_file = `${AUD_DIR}/BEPS Instructions.m4a`;&amp;#10;    } else {&amp;#10;        aud_file = `${AUD_DIR}/${taskName} ${qn_num}.m4a`;&amp;#10;    }&amp;#10;    SOUND = make_sound(&quot;sound&quot;, aud_file);&amp;#10;    SOUND_DUR = SOUND.getDuration();&amp;#10;    SOUND_START = 0;&amp;#10;    SOUND.play();&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    cimg_names = [];&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(cimgs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        cimg_names.push(cimgs[i].name);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;thisExp.addData(&quot;expVersion&quot;, expVersion)&amp;#10;&amp;#10;cimgs = []&amp;#10;cimg_names = []&amp;#10;&amp;#10;response = None&amp;#10;has_responded = False&amp;#10;RESPONSE_TIME = None&amp;#10;&amp;#10;slide_num = slideNum&amp;#10;qn_num = qnNum&amp;#10;&amp;#10;if taskName == &quot;BEPS&quot; and qn_num == &quot;Q04a&quot; and not previous_wrong:&amp;#10;    previous_wrong = False&amp;#10;    continueRoutine = False&amp;#10;&amp;#10;slide = make_slide(slide_num)&amp;#10;slide.autoDraw = True&amp;#10;&amp;#10;cimgs = all_cimgs[slide_num]()&amp;#10;radio0s = []&amp;#10;radio1s = []&amp;#10;if slide_num == &quot;slide-02&quot;:&amp;#10;    radio0s = make_radios(make_radio0, cimgs[:3], radio0s)&amp;#10;    radio0s = make_radios(make_radio0, cimgs[3:], radio0s)&amp;#10;    radio1s = make_radios(make_radio1, cimgs[:3], radio1s)&amp;#10;    radio1s = make_radios(make_radio1, cimgs[3:], radio1s)&amp;#10;else:&amp;#10;    radio0s = make_radios(make_radio0, cimgs, radio0s)&amp;#10;    radio1s = make_radios(make_radio1, cimgs, radio1s)&amp;#10;for i in range(len(cimgs)):&amp;#10;    cimgs[i].opacity = CLICK_BOX_OPACITY&amp;#10;    cimgs[i].autoDraw = True&amp;#10;    radio0s[i].autoDraw = True&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    if taskName == &quot;BEPS&quot; and qn_num == &quot;Q01&quot;:&amp;#10;        aud_file = f&quot;{AUD_DIR}/BEPS Instructions.m4a&quot;&amp;#10;    else:&amp;#10;        aud_file = f&quot;{AUD_DIR}/{taskName} {qn_num}.m4a&quot;&amp;#10;    SOUND = make_sound(&quot;sound&quot;, aud_file)&amp;#10;    SOUND_DUR = SOUND.getDuration()&amp;#10;    SOUND_START = 0&amp;#10;    SOUND.play()&amp;#10;&amp;#10;&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    cimg_names = []&amp;#10;    for i in range(len(cimgs)):&amp;#10;        cimg_names.append(cimgs[i].name)&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if slide_num in REPLAY_IN_SLIDES: &amp;#10;    if t - SOUND_START &gt;= SOUND_DUR / 10*9:&amp;#10;        REPLAY.autoDraw = True&amp;#10;    else:&amp;#10;        REPLAY.autoDraw = False&amp;#10;else:&amp;#10;    REPLAY.autoDraw = False&amp;#10;&amp;#10;if slide_num in NEXT_IN_SLIDES:&amp;#10;    if has_responded:&amp;#10;        NEXT.autoDraw = True&amp;#10;    else:&amp;#10;        NEXT.autoDraw = False&amp;#10;    #COVER.autoDraw = True&amp;#10;    #COVER.opacity = 1&amp;#10;else:&amp;#10;    NEXT.autoDraw = False&amp;#10;    #COVER.autoDraw = False&amp;#10;&amp;#10;    &amp;#10;if taskName == &quot;BEPS&quot; and qn_num == &quot;Q01&quot; and SOUND_START == 0 and t - SOUND_DUR &gt; 0:&amp;#10;    aud_file = f&quot;{AUD_DIR}/{taskName} {qn_num}.m4a&quot;&amp;#10;    SOUND = make_sound(&quot;sound&quot;, aud_file)&amp;#10;    SOUND_DUR = SOUND.getDuration()&amp;#10;    SOUND_START = t&amp;#10;    SOUND.play()&amp;#10;&amp;#10;MOUSE_L = MOUSE.getPressed()[0]&amp;#10;if MOUSE_L_prev != MOUSE_L:&amp;#10;    print(f&quot;MOUSE_L_prev = {MOUSE_L_prev}; &quot;&amp;#10;          f&quot;MOUSE_L = {MOUSE_L}&quot;)&amp;#10;    MOUSE_L_prev = MOUSE_L&amp;#10;    if MOUSE_L:&amp;#10;        if has_responded and NEXT.contains(MOUSE):&amp;#10;            continueRoutine = False&amp;#10;        if REPLAY.autoDraw and REPLAY.contains(MOUSE):&amp;#10;            if t - SOUND_START &lt; SOUND_DUR:&amp;#10;                # Will only work if the sound has not finished&amp;#10;                SOUND.stop()&amp;#10;            SOUND = make_sound(&quot;sound&quot;, aud_file)&amp;#10;            SOUND_START = t&amp;#10;            SOUND.play()&amp;#10;        for i in range(len(cimgs)):&amp;#10;            if cimgs[i].contains(MOUSE) or radio0s[i].contains(MOUSE):&amp;#10;                if not has_responded:&amp;#10;                    has_responded = True&amp;#10;#                    COVER.autoDraw = False&amp;#10;#                    COVER.opacity = 0&amp;#10;                response = cimgs[i].name&amp;#10;                for radio in radio1s:&amp;#10;                    radio.autoDraw = False&amp;#10;                    if response == radio.name:&amp;#10;                        radio.autoDraw = True&amp;#10;#                continueRoutine = False&amp;#10;                RESPONSE_TIME = t&amp;#10;&amp;#10;if RESPONSE_TIME is not None and t - RESPONSE_TIME &gt; 0.5:&amp;#10;    if slide_num not in NEXT_IN_SLIDES: &amp;#10;        continueRoutine = False&amp;#10;&amp;#10;# Disable bounding boxes for cookie question &amp;#10;# because it might provide too much help for &amp;#10;# size comparison.&amp;#10;if slide_num != &quot;slide-07&quot;:&amp;#10;    for cimg in cimgs:&amp;#10;        if cimg.contains(MOUSE):&amp;#10;            cimg.opacity = BOUND_BOX_OPACITY&amp;#10;        else:&amp;#10;            cimg.opacity = CLICK_BOX_OPACITY&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    trial_text.text = f&quot;&quot;&quot;&amp;#10;taskName = {taskName}&amp;#10;aud_file = {aud_file}&amp;#10;slide_num = {slide_num}&amp;#10;qn_num = {qn_num}&amp;#10;cimg_names = {cimg_names}&amp;#10;response = {response}&amp;#10;corrAns = {corrAns}&amp;#10;t = {round(t, 3)}&amp;#10;&quot;&quot;&quot;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if (_pj.in_es6(slide_num, REPLAY_IN_SLIDES)) {&amp;#10;    if (((t - SOUND_START) &gt;= ((SOUND_DUR / 10) * 9))) {&amp;#10;        REPLAY.autoDraw = true;&amp;#10;    } else {&amp;#10;        REPLAY.autoDraw = false;&amp;#10;    }&amp;#10;} else {&amp;#10;    REPLAY.autoDraw = false;&amp;#10;}&amp;#10;if (_pj.in_es6(slide_num, NEXT_IN_SLIDES)) {&amp;#10;    if (has_responded) {&amp;#10;        NEXT.autoDraw = true;&amp;#10;    } else {&amp;#10;        NEXT.autoDraw = false;&amp;#10;    }&amp;#10;} else {&amp;#10;    NEXT.autoDraw = false;&amp;#10;}&amp;#10;if (((((taskName === &quot;BEPS&quot;) &amp;&amp; (qn_num === &quot;Q01&quot;)) &amp;&amp; (SOUND_START === 0)) &amp;&amp; ((t - SOUND_DUR) &gt; 0))) {&amp;#10;    aud_file = `${AUD_DIR}/${taskName} ${qn_num}.m4a`;&amp;#10;    SOUND = make_sound(&quot;sound&quot;, aud_file);&amp;#10;    SOUND_DUR = SOUND.getDuration();&amp;#10;    SOUND_START = t;&amp;#10;    SOUND.play();&amp;#10;}&amp;#10;MOUSE_L = MOUSE.getPressed()[0];&amp;#10;if ((MOUSE_L_prev !== MOUSE_L)) {&amp;#10;    console.log(`MOUSE_L_prev = ${MOUSE_L_prev}; MOUSE_L = ${MOUSE_L}`);&amp;#10;    MOUSE_L_prev = MOUSE_L;&amp;#10;    if (MOUSE_L) {&amp;#10;        if ((has_responded &amp;&amp; NEXT.contains(MOUSE))) {&amp;#10;            continueRoutine = false;&amp;#10;        }&amp;#10;        if ((REPLAY.autoDraw &amp;&amp; REPLAY.contains(MOUSE))) {&amp;#10;            if (((t - SOUND_START) &lt; SOUND_DUR)) {&amp;#10;                SOUND.stop();&amp;#10;            }&amp;#10;            SOUND = make_sound(&quot;sound&quot;, aud_file);&amp;#10;            SOUND_START = t;&amp;#10;            SOUND.play();&amp;#10;        }&amp;#10;        for (var i, _pj_c = 0, _pj_a = util.range(cimgs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            i = _pj_a[_pj_c];&amp;#10;            if ((cimgs[i].contains(MOUSE) || radio0s[i].contains(MOUSE))) {&amp;#10;                if ((! has_responded)) {&amp;#10;                    has_responded = true;&amp;#10;                }&amp;#10;                response = cimgs[i].name;&amp;#10;                for (var radio, _pj_f = 0, _pj_d = radio1s, _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;                    radio = _pj_d[_pj_f];&amp;#10;                    radio.autoDraw = false;&amp;#10;                    if ((response === radio.name)) {&amp;#10;                        radio.autoDraw = true;&amp;#10;                    }&amp;#10;                }&amp;#10;                RESPONSE_TIME = t;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (((RESPONSE_TIME !== null) &amp;&amp; ((t - RESPONSE_TIME) &gt; 0.5))) {&amp;#10;    if ((! _pj.in_es6(slide_num, NEXT_IN_SLIDES))) {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;if ((slide_num !== &quot;slide-07&quot;)) {&amp;#10;    for (var cimg, _pj_c = 0, _pj_a = cimgs, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        cimg = _pj_a[_pj_c];&amp;#10;        if (cimg.contains(MOUSE)) {&amp;#10;            cimg.opacity = BOUND_BOX_OPACITY;&amp;#10;        } else {&amp;#10;            cimg.opacity = CLICK_BOX_OPACITY;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    trial_text.text = `&amp;#10;taskName = ${taskName}&amp;#10;aud_file = ${aud_file}&amp;#10;slide_num = ${slide_num}&amp;#10;qn_num = ${qn_num}&amp;#10;cimg_names = ${cimg_names}&amp;#10;response = ${response}&amp;#10;corrAns = ${corrAns}&amp;#10;t = ${round(t, 3)}`&amp;#10;;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="REPLAY.autoDraw = false;&amp;#10;NEXT.autoDraw = false;&amp;#10;if (USE_AUDIO) {&amp;#10;    SOUND.stop();&amp;#10;}&amp;#10;for (var cimg, _pj_c = 0, _pj_a = cimgs, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    cimg = _pj_a[_pj_c];&amp;#10;    cimg.size = [0, 0];&amp;#10;    cimg.autoDraw = false;&amp;#10;}&amp;#10;for (var radio, _pj_c = 0, _pj_a = radio0s, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    radio = _pj_a[_pj_c];&amp;#10;    radio.size = [0, 0];&amp;#10;    radio.autoDraw = false;&amp;#10;}&amp;#10;for (var radio, _pj_c = 0, _pj_a = radio1s, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    radio = _pj_a[_pj_c];&amp;#10;    radio.size = [0, 0];&amp;#10;    radio.autoDraw = false;&amp;#10;}&amp;#10;slide.size = [0, 0];&amp;#10;slide.autoDraw = false;&amp;#10;if ((response === null)) {&amp;#10;    response = &quot;&quot;;&amp;#10;}&amp;#10;is_correct = ((response.toString() === corrAns.toString()) ? 1 : 0);&amp;#10;if ((response === &quot;&quot;)) {&amp;#10;    is_correct = &quot;&quot;;&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;response&quot;, response);&amp;#10;psychoJS.experiment.addData(&quot;is_correct&quot;, is_correct);&amp;#10;psychoJS.experiment.addData(&quot;end_timestamp&quot;, util.MonotonicClock.getDateStr());&amp;#10;psychoJS.experiment.addData(&quot;total_seconds&quot;, globalClock.getTime());&amp;#10;if ((((taskName === &quot;BEPS&quot;) &amp;&amp; (qn_num === &quot;Q04&quot;)) &amp;&amp; (is_correct === 0))) {&amp;#10;    previous_wrong = true;&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    console.log(`response = ${response}`);&amp;#10;    console.log(`corrAns = ${corrAns}`);&amp;#10;    console.log(`previous_wrong = ${previous_wrong}`);&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;REPLAY.autoDraw = False&amp;#10;NEXT.autoDraw = False&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    SOUND.stop()&amp;#10;&amp;#10;for cimg in cimgs:&amp;#10;    cimg.size = (0, 0)&amp;#10;    cimg.autoDraw = False&amp;#10;for radio in radio0s:&amp;#10;    radio.size = (0, 0)&amp;#10;    radio.autoDraw = False&amp;#10;for radio in radio1s:&amp;#10;    radio.size = (0, 0)&amp;#10;    radio.autoDraw = False&amp;#10;&amp;#10;slide.size = (0, 0)&amp;#10;slide.autoDraw = False&amp;#10;&amp;#10;# TODO: There must be a better way!&amp;#10;if response is None:&amp;#10;    response = &quot;&quot;&amp;#10;is_correct = 1 if str(response) == str(corrAns) else 0&amp;#10;if response is &quot;&quot;:&amp;#10;    is_correct = &quot;&quot;&amp;#10;thisExp.addData(&quot;response&quot;, response)&amp;#10;thisExp.addData(&quot;is_correct&quot;, is_correct)&amp;#10;&amp;#10;# Record timestamp and total time&amp;#10;thisExp.addData(&quot;end_timestamp&quot;, util.MonotonicClock.getDateStr())&amp;#10;thisExp.addData(&quot;total_seconds&quot;, globalClock.getTime())&amp;#10;&amp;#10;if taskName == &quot;BEPS&quot; and qn_num == &quot;Q04&quot; and is_correct == 0:&amp;#10;    previous_wrong = True&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    print(f&quot;response = {response}&quot;)&amp;#10;    print(f&quot;corrAns = {corrAns}&quot;)&amp;#10;    print(f&quot;previous_wrong = {previous_wrong}&quot;)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="trial_code" valType="code"/>
      </CodeComponent>
      <CodeComponent name="trial_anim">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="&amp;#10;run_anim = False&amp;#10;aimgs = None&amp;#10;starts = None&amp;#10;ends = None&amp;#10;&amp;#10;def anim_beps_q04():&amp;#10;    # Slide 03&amp;#10;    names = [&quot;box_pattern&quot;, &quot;box_options&quot;]&amp;#10;    xys = [(0, 0.15), (0, -0.22)]&amp;#10;    sizes = [(0.8, 0.2), (0.9, 0.25)]&amp;#10;    start_times = [2, 5]&amp;#10;    end_times = [4, 7]&amp;#10;    return make_boxes(names, xys, sizes, 1, &quot;red&quot;), start_times, end_times&amp;#10;    &amp;#10;beps_anims = {&amp;#10;    &quot;BEPS Q04&quot;: anim_beps_q04,&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="run_anim = false;&amp;#10;aimgs = null;&amp;#10;starts = null;&amp;#10;ends = null;&amp;#10;function anim_beps_q04() {&amp;#10;    var end_times, names, sizes, start_times, xys;&amp;#10;    names = [&quot;box_pattern&quot;, &quot;box_options&quot;];&amp;#10;    xys = [[0, 0.15], [0, (- 0.22)]];&amp;#10;    sizes = [[0.8, 0.2], [0.9, 0.25]];&amp;#10;    start_times = [2, 5];&amp;#10;    end_times = [4, 7];&amp;#10;    return [make_boxes(names, xys, sizes, 1, &quot;red&quot;), start_times, end_times];&amp;#10;}&amp;#10;beps_anims = {&quot;BEPS Q04&quot;: anim_beps_q04};&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;key = `${taskName} ${qn_num}`;&amp;#10;if ((USE_AUDIO &amp;&amp; _pj.in_es6(key, beps_anims))) {&amp;#10;    run_anim = true;&amp;#10;    [aimgs, starts, ends] = beps_anims[key]();&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;key = f&quot;{taskName} {qn_num}&quot;&amp;#10;&amp;#10;if USE_AUDIO and key in beps_anims:&amp;#10;    run_anim = True&amp;#10;    aimgs, starts, ends = beps_anims[key]()&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="&amp;#10;if run_anim:&amp;#10;    for i in range(len(aimgs)):&amp;#10;        if t &gt;= starts[i]:&amp;#10;            aimgs[i].autoDraw = True&amp;#10;        if t &gt;= ends[i]:&amp;#10;            aimgs[i].autoDraw = False&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if (run_anim) {&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(aimgs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        if ((t &gt;= starts[i])) {&amp;#10;            aimgs[i].autoDraw = true;&amp;#10;        }&amp;#10;        if ((t &gt;= ends[i])) {&amp;#10;            aimgs[i].autoDraw = false;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (run_anim) {&amp;#10;    run_anim = false;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;if run_anim:&amp;#10;    run_anim = False&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="trial_anim" valType="code"/>
      </CodeComponent>
      <TextComponent name="trial_text">
        <Param name="color" updates="constant" val="black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.02" valType="num"/>
        <Param name="name" updates="None" val="trial_text" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0.6, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
    <Routine name="pams_trial">
      <CodeComponent name="pams_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;expVersion&quot;, expVersion);&amp;#10;cimgs = [];&amp;#10;cimg_names = [];&amp;#10;response = null;&amp;#10;has_responded = false;&amp;#10;RESPONSE_TIME = null;&amp;#10;slide_num = slideNum;&amp;#10;qn_num = qnNum;&amp;#10;if ((((taskName === &quot;BEPS&quot;) &amp;&amp; (qn_num === &quot;Q04a&quot;)) &amp;&amp; (! previous_wrong))) {&amp;#10;    previous_wrong = false;&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;slide = make_slide(slide_num);&amp;#10;slide.autoDraw = true;&amp;#10;cimgs = all_cimgs[slide_num]();&amp;#10;radio0s = [];&amp;#10;radio1s = [];&amp;#10;if ((slide_num === &quot;slide-02&quot;)) {&amp;#10;    radio0s = make_radios(make_radio0, cimgs.slice(0, 3), radio0s);&amp;#10;    radio0s = make_radios(make_radio0, cimgs.slice(3), radio0s);&amp;#10;    radio1s = make_radios(make_radio1, cimgs.slice(0, 3), radio1s);&amp;#10;    radio1s = make_radios(make_radio1, cimgs.slice(3), radio1s);&amp;#10;} else {&amp;#10;    radio0s = make_radios(make_radio0, cimgs, radio0s);&amp;#10;    radio1s = make_radios(make_radio1, cimgs, radio1s);&amp;#10;}&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(cimgs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    cimgs[i].opacity = CLICK_BOX_OPACITY;&amp;#10;    cimgs[i].autoDraw = true;&amp;#10;    radio0s[i].autoDraw = true;&amp;#10;}&amp;#10;if (USE_AUDIO) {&amp;#10;    if (((taskName === &quot;BEPS&quot;) &amp;&amp; (qn_num === &quot;Q01&quot;))) {&amp;#10;        aud_file = `${AUD_DIR}/BEPS Instructions.m4a`;&amp;#10;    } else {&amp;#10;        aud_file = `${AUD_DIR}/${taskName} ${qn_num}.m4a`;&amp;#10;    }&amp;#10;    SOUND = make_sound(&quot;sound&quot;, aud_file);&amp;#10;    SOUND_DUR = SOUND.getDuration();&amp;#10;    SOUND_START = 0;&amp;#10;    SOUND.play();&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    cimg_names = [];&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(cimgs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        cimg_names.push(cimgs[i].name);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;thisExp.addData(&quot;expVersion&quot;, expVersion)&amp;#10;&amp;#10;cimgs = []&amp;#10;cimg_names = []&amp;#10;&amp;#10;response = None&amp;#10;has_responded = False&amp;#10;RESPONSE_TIME = None&amp;#10;&amp;#10;slide_num = slideNum&amp;#10;qn_num = qnNum&amp;#10;&amp;#10;if taskName == &quot;BEPS&quot; and qn_num == &quot;Q04a&quot; and not previous_wrong:&amp;#10;    previous_wrong = False&amp;#10;    continueRoutine = False&amp;#10;&amp;#10;slide = make_slide(slide_num)&amp;#10;slide.autoDraw = True&amp;#10;&amp;#10;cimgs = all_cimgs[slide_num]()&amp;#10;radio0s = []&amp;#10;radio1s = []&amp;#10;if slide_num == &quot;slide-02&quot;:&amp;#10;    radio0s = make_radios(make_radio0, cimgs[:3], radio0s)&amp;#10;    radio0s = make_radios(make_radio0, cimgs[3:], radio0s)&amp;#10;    radio1s = make_radios(make_radio1, cimgs[:3], radio1s)&amp;#10;    radio1s = make_radios(make_radio1, cimgs[3:], radio1s)&amp;#10;else:&amp;#10;    radio0s = make_radios(make_radio0, cimgs, radio0s)&amp;#10;    radio1s = make_radios(make_radio1, cimgs, radio1s)&amp;#10;for i in range(len(cimgs)):&amp;#10;    cimgs[i].opacity = CLICK_BOX_OPACITY&amp;#10;    cimgs[i].autoDraw = True&amp;#10;    radio0s[i].autoDraw = True&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    if taskName == &quot;BEPS&quot; and qn_num == &quot;Q01&quot;:&amp;#10;        aud_file = f&quot;{AUD_DIR}/BEPS Instructions.m4a&quot;&amp;#10;    else:&amp;#10;        aud_file = f&quot;{AUD_DIR}/{taskName} {qn_num}.m4a&quot;&amp;#10;    SOUND = make_sound(&quot;sound&quot;, aud_file)&amp;#10;    SOUND_DUR = SOUND.getDuration()&amp;#10;    SOUND_START = 0&amp;#10;    SOUND.play()&amp;#10;&amp;#10;&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    cimg_names = []&amp;#10;    for i in range(len(cimgs)):&amp;#10;        cimg_names.append(cimgs[i].name)&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if slide_num in REPLAY_IN_SLIDES: &amp;#10;    if t - SOUND_START &gt;= SOUND_DUR / 10*9:&amp;#10;        REPLAY.autoDraw = True&amp;#10;    else:&amp;#10;        REPLAY.autoDraw = False&amp;#10;else:&amp;#10;    REPLAY.autoDraw = False&amp;#10;&amp;#10;if slide_num in NEXT_IN_SLIDES:&amp;#10;    if has_responded:&amp;#10;        NEXT.autoDraw = True&amp;#10;    else:&amp;#10;        NEXT.autoDraw = False&amp;#10;    #COVER.autoDraw = True&amp;#10;    #COVER.opacity = 1&amp;#10;else:&amp;#10;    NEXT.autoDraw = False&amp;#10;    #COVER.autoDraw = False&amp;#10;&amp;#10;    &amp;#10;if taskName == &quot;BEPS&quot; and qn_num == &quot;Q01&quot; and SOUND_START == 0 and t - SOUND_DUR &gt; 0:&amp;#10;    aud_file = f&quot;{AUD_DIR}/{taskName} {qn_num}.m4a&quot;&amp;#10;    SOUND = make_sound(&quot;sound&quot;, aud_file)&amp;#10;    SOUND_DUR = SOUND.getDuration()&amp;#10;    SOUND_START = t&amp;#10;    SOUND.play()&amp;#10;&amp;#10;MOUSE_L = MOUSE.getPressed()[0]&amp;#10;if MOUSE_L_prev != MOUSE_L:&amp;#10;    print(f&quot;MOUSE_L_prev = {MOUSE_L_prev}; &quot;&amp;#10;          f&quot;MOUSE_L = {MOUSE_L}&quot;)&amp;#10;    MOUSE_L_prev = MOUSE_L&amp;#10;    if MOUSE_L:&amp;#10;        if has_responded and NEXT.contains(MOUSE):&amp;#10;            continueRoutine = False&amp;#10;        if REPLAY.autoDraw and REPLAY.contains(MOUSE):&amp;#10;            if t - SOUND_START &lt; SOUND_DUR:&amp;#10;                # Will only work if the sound has not finished&amp;#10;                SOUND.stop()&amp;#10;            SOUND = make_sound(&quot;sound&quot;, aud_file)&amp;#10;            SOUND_START = t&amp;#10;            SOUND.play()&amp;#10;        for i in range(len(cimgs)):&amp;#10;            if cimgs[i].contains(MOUSE) or radio0s[i].contains(MOUSE):&amp;#10;                if not has_responded:&amp;#10;                    has_responded = True&amp;#10;#                    COVER.autoDraw = False&amp;#10;#                    COVER.opacity = 0&amp;#10;                response = cimgs[i].name&amp;#10;                for radio in radio1s:&amp;#10;                    radio.autoDraw = False&amp;#10;                    if response == radio.name:&amp;#10;                        radio.autoDraw = True&amp;#10;#                continueRoutine = False&amp;#10;                RESPONSE_TIME = t&amp;#10;&amp;#10;if RESPONSE_TIME is not None and t - RESPONSE_TIME &gt; 0.5:&amp;#10;    if slide_num not in NEXT_IN_SLIDES: &amp;#10;        continueRoutine = False&amp;#10;&amp;#10;# Disable bounding boxes for cookie question &amp;#10;# because it might provide too much help for &amp;#10;# size comparison.&amp;#10;if slide_num != &quot;slide-07&quot;:&amp;#10;    for cimg in cimgs:&amp;#10;        if cimg.contains(MOUSE):&amp;#10;            cimg.opacity = BOUND_BOX_OPACITY&amp;#10;        else:&amp;#10;            cimg.opacity = CLICK_BOX_OPACITY&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    trial_text.text = f&quot;&quot;&quot;&amp;#10;taskName = {taskName}&amp;#10;aud_file = {aud_file}&amp;#10;slide_num = {slide_num}&amp;#10;qn_num = {qn_num}&amp;#10;cimg_names = {cimg_names}&amp;#10;response = {response}&amp;#10;corrAns = {corrAns}&amp;#10;t = {round(t, 3)}&amp;#10;&quot;&quot;&quot;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if (_pj.in_es6(slide_num, REPLAY_IN_SLIDES)) {&amp;#10;    if (((t - SOUND_START) &gt;= ((SOUND_DUR / 10) * 9))) {&amp;#10;        REPLAY.autoDraw = true;&amp;#10;    } else {&amp;#10;        REPLAY.autoDraw = false;&amp;#10;    }&amp;#10;} else {&amp;#10;    REPLAY.autoDraw = false;&amp;#10;}&amp;#10;if (_pj.in_es6(slide_num, NEXT_IN_SLIDES)) {&amp;#10;    if (has_responded) {&amp;#10;        NEXT.autoDraw = true;&amp;#10;    } else {&amp;#10;        NEXT.autoDraw = false;&amp;#10;    }&amp;#10;} else {&amp;#10;    NEXT.autoDraw = false;&amp;#10;}&amp;#10;if (((((taskName === &quot;BEPS&quot;) &amp;&amp; (qn_num === &quot;Q01&quot;)) &amp;&amp; (SOUND_START === 0)) &amp;&amp; ((t - SOUND_DUR) &gt; 0))) {&amp;#10;    aud_file = `${AUD_DIR}/${taskName} ${qn_num}.m4a`;&amp;#10;    SOUND = make_sound(&quot;sound&quot;, aud_file);&amp;#10;    SOUND_DUR = SOUND.getDuration();&amp;#10;    SOUND_START = t;&amp;#10;    SOUND.play();&amp;#10;}&amp;#10;MOUSE_L = MOUSE.getPressed()[0];&amp;#10;if ((MOUSE_L_prev !== MOUSE_L)) {&amp;#10;    console.log(`MOUSE_L_prev = ${MOUSE_L_prev}; MOUSE_L = ${MOUSE_L}`);&amp;#10;    MOUSE_L_prev = MOUSE_L;&amp;#10;    if (MOUSE_L) {&amp;#10;        if ((has_responded &amp;&amp; NEXT.contains(MOUSE))) {&amp;#10;            continueRoutine = false;&amp;#10;        }&amp;#10;        if ((REPLAY.autoDraw &amp;&amp; REPLAY.contains(MOUSE))) {&amp;#10;            if (((t - SOUND_START) &lt; SOUND_DUR)) {&amp;#10;                SOUND.stop();&amp;#10;            }&amp;#10;            SOUND = make_sound(&quot;sound&quot;, aud_file);&amp;#10;            SOUND_START = t;&amp;#10;            SOUND.play();&amp;#10;        }&amp;#10;        for (var i, _pj_c = 0, _pj_a = util.range(cimgs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            i = _pj_a[_pj_c];&amp;#10;            if ((cimgs[i].contains(MOUSE) || radio0s[i].contains(MOUSE))) {&amp;#10;                if ((! has_responded)) {&amp;#10;                    has_responded = true;&amp;#10;                }&amp;#10;                response = cimgs[i].name;&amp;#10;                for (var radio, _pj_f = 0, _pj_d = radio1s, _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;                    radio = _pj_d[_pj_f];&amp;#10;                    radio.autoDraw = false;&amp;#10;                    if ((response === radio.name)) {&amp;#10;                        radio.autoDraw = true;&amp;#10;                    }&amp;#10;                }&amp;#10;                RESPONSE_TIME = t;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (((RESPONSE_TIME !== null) &amp;&amp; ((t - RESPONSE_TIME) &gt; 0.5))) {&amp;#10;    if ((! _pj.in_es6(slide_num, NEXT_IN_SLIDES))) {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;if ((slide_num !== &quot;slide-07&quot;)) {&amp;#10;    for (var cimg, _pj_c = 0, _pj_a = cimgs, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        cimg = _pj_a[_pj_c];&amp;#10;        if (cimg.contains(MOUSE)) {&amp;#10;            cimg.opacity = BOUND_BOX_OPACITY;&amp;#10;        } else {&amp;#10;            cimg.opacity = CLICK_BOX_OPACITY;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    trial_text.text = `&amp;#10;taskName = ${taskName}&amp;#10;aud_file = ${aud_file}&amp;#10;slide_num = ${slide_num}&amp;#10;qn_num = ${qn_num}&amp;#10;cimg_names = ${cimg_names}&amp;#10;response = ${response}&amp;#10;corrAns = ${corrAns}&amp;#10;t = ${round(t, 3)}`&amp;#10;;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="REPLAY.autoDraw = false;&amp;#10;NEXT.autoDraw = false;&amp;#10;if (USE_AUDIO) {&amp;#10;    SOUND.stop();&amp;#10;}&amp;#10;for (var cimg, _pj_c = 0, _pj_a = cimgs, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    cimg = _pj_a[_pj_c];&amp;#10;    cimg.size = [0, 0];&amp;#10;    cimg.autoDraw = false;&amp;#10;}&amp;#10;for (var radio, _pj_c = 0, _pj_a = radio0s, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    radio = _pj_a[_pj_c];&amp;#10;    radio.size = [0, 0];&amp;#10;    radio.autoDraw = false;&amp;#10;}&amp;#10;for (var radio, _pj_c = 0, _pj_a = radio1s, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    radio = _pj_a[_pj_c];&amp;#10;    radio.size = [0, 0];&amp;#10;    radio.autoDraw = false;&amp;#10;}&amp;#10;slide.size = [0, 0];&amp;#10;slide.autoDraw = false;&amp;#10;if ((response === null)) {&amp;#10;    response = &quot;&quot;;&amp;#10;}&amp;#10;is_correct = ((response.toString() === corrAns.toString()) ? 1 : 0);&amp;#10;if ((response === &quot;&quot;)) {&amp;#10;    is_correct = &quot;&quot;;&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;response&quot;, response);&amp;#10;psychoJS.experiment.addData(&quot;is_correct&quot;, is_correct);&amp;#10;psychoJS.experiment.addData(&quot;end_timestamp&quot;, util.MonotonicClock.getDateStr());&amp;#10;psychoJS.experiment.addData(&quot;total_seconds&quot;, globalClock.getTime());&amp;#10;if ((((taskName === &quot;BEPS&quot;) &amp;&amp; (qn_num === &quot;Q04&quot;)) &amp;&amp; (is_correct === 0))) {&amp;#10;    previous_wrong = true;&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    console.log(`response = ${response}`);&amp;#10;    console.log(`corrAns = ${corrAns}`);&amp;#10;    console.log(`previous_wrong = ${previous_wrong}`);&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;REPLAY.autoDraw = False&amp;#10;NEXT.autoDraw = False&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    SOUND.stop()&amp;#10;&amp;#10;for cimg in cimgs:&amp;#10;    cimg.size = (0, 0)&amp;#10;    cimg.autoDraw = False&amp;#10;for radio in radio0s:&amp;#10;    radio.size = (0, 0)&amp;#10;    radio.autoDraw = False&amp;#10;for radio in radio1s:&amp;#10;    radio.size = (0, 0)&amp;#10;    radio.autoDraw = False&amp;#10;&amp;#10;slide.size = (0, 0)&amp;#10;slide.autoDraw = False&amp;#10;&amp;#10;# TODO: There must be a better way!&amp;#10;if response is None:&amp;#10;    response = &quot;&quot;&amp;#10;is_correct = 1 if str(response) == str(corrAns) else 0&amp;#10;if response is &quot;&quot;:&amp;#10;    is_correct = &quot;&quot;&amp;#10;thisExp.addData(&quot;response&quot;, response)&amp;#10;thisExp.addData(&quot;is_correct&quot;, is_correct)&amp;#10;&amp;#10;# Record timestamp and total time&amp;#10;thisExp.addData(&quot;end_timestamp&quot;, util.MonotonicClock.getDateStr())&amp;#10;thisExp.addData(&quot;total_seconds&quot;, globalClock.getTime())&amp;#10;&amp;#10;if taskName == &quot;BEPS&quot; and qn_num == &quot;Q04&quot; and is_correct == 0:&amp;#10;    previous_wrong = True&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    print(f&quot;response = {response}&quot;)&amp;#10;    print(f&quot;corrAns = {corrAns}&quot;)&amp;#10;    print(f&quot;previous_wrong = {previous_wrong}&quot;)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="pams_code" valType="code"/>
      </CodeComponent>
      <CodeComponent name="pams_anim">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="&amp;#10;run_anim = False&amp;#10;aimgs = None&amp;#10;starts = None&amp;#10;ends = None&amp;#10;&amp;#10;def anim_pams_q10():&amp;#10;    # Slide 18&amp;#10;    names = [&quot;box_long_pencil&quot;]&amp;#10;    xys = [(-0.022, 0.16)]&amp;#10;    sizes = [(0.85, 0.23)]&amp;#10;    start_times = [2]&amp;#10;    end_times = [8]&amp;#10;    return make_boxes(names, xys, sizes, 1, &quot;red&quot;), start_times, end_times&amp;#10;&amp;#10;def anim_pams_q11():&amp;#10;    # Slide 19&amp;#10;    names = [&quot;box_chicken&quot;]&amp;#10;    xys = [(-0.215, 0.005)]&amp;#10;    sizes = [(0.23, 0.18)]&amp;#10;    start_times = [6.5]&amp;#10;    end_times = [9.7]&amp;#10;    return make_boxes(names, xys, sizes, 1, &quot;red&quot;), start_times, end_times&amp;#10;&amp;#10;def anim_pams_q12():&amp;#10;    # Slide 20&amp;#10;    names = [&quot;box_cows&quot;]&amp;#10;    xys = [(0, 0.125)]&amp;#10;    sizes = [(0.67, 0.41)]&amp;#10;    start_times = [1.9]&amp;#10;    end_times = [4.2]&amp;#10;    return make_boxes(names, xys, sizes, 1, &quot;red&quot;), start_times, end_times&amp;#10;&amp;#10;pams_anims = {&amp;#10;    &quot;PAMS Q10&quot;: anim_pams_q10,&amp;#10;    &quot;PAMS Q11&quot;: anim_pams_q11,&amp;#10;    &quot;PAMS Q12&quot;: anim_pams_q12,&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="run_anim = false;&amp;#10;aimgs = null;&amp;#10;starts = null;&amp;#10;ends = null;&amp;#10;function anim_pams_q10() {&amp;#10;    var end_times, names, sizes, start_times, xys;&amp;#10;    names = [&quot;box_long_pencil&quot;];&amp;#10;    xys = [[(- 0.022), 0.16]];&amp;#10;    sizes = [[0.85, 0.23]];&amp;#10;    start_times = [2];&amp;#10;    end_times = [8];&amp;#10;    return [make_boxes(names, xys, sizes, 1, &quot;red&quot;), start_times, end_times];&amp;#10;}&amp;#10;function anim_pams_q11() {&amp;#10;    var end_times, names, sizes, start_times, xys;&amp;#10;    names = [&quot;box_chicken&quot;];&amp;#10;    xys = [[(- 0.215), 0.005]];&amp;#10;    sizes = [[0.23, 0.18]];&amp;#10;    start_times = [6.5];&amp;#10;    end_times = [9.7];&amp;#10;    return [make_boxes(names, xys, sizes, 1, &quot;red&quot;), start_times, end_times];&amp;#10;}&amp;#10;function anim_pams_q12() {&amp;#10;    var end_times, names, sizes, start_times, xys;&amp;#10;    names = [&quot;box_cows&quot;];&amp;#10;    xys = [[0, 0.125]];&amp;#10;    sizes = [[0.67, 0.41]];&amp;#10;    start_times = [1.9];&amp;#10;    end_times = [4.2];&amp;#10;    return [make_boxes(names, xys, sizes, 1, &quot;red&quot;), start_times, end_times];&amp;#10;}&amp;#10;pams_anims = {&quot;PAMS Q10&quot;: anim_pams_q10, &quot;PAMS Q11&quot;: anim_pams_q11, &quot;PAMS Q12&quot;: anim_pams_q12};&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;key = `${taskName} ${qn_num}`;&amp;#10;if ((USE_AUDIO &amp;&amp; _pj.in_es6(key, pams_anims))) {&amp;#10;    run_anim = true;&amp;#10;    [aimgs, starts, ends] = pams_anims[key]();&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;key = f&quot;{taskName} {qn_num}&quot;&amp;#10;&amp;#10;if USE_AUDIO and key in pams_anims:&amp;#10;    run_anim = True&amp;#10;    aimgs, starts, ends = pams_anims[key]()&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="&amp;#10;if run_anim:&amp;#10;    for i in range(len(aimgs)):&amp;#10;        if t &gt;= starts[i]:&amp;#10;            aimgs[i].autoDraw = True&amp;#10;        if t &gt;= ends[i]:&amp;#10;            aimgs[i].autoDraw = False&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if (run_anim) {&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(aimgs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        if ((t &gt;= starts[i])) {&amp;#10;            aimgs[i].autoDraw = true;&amp;#10;        }&amp;#10;        if ((t &gt;= ends[i])) {&amp;#10;            aimgs[i].autoDraw = false;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (run_anim) {&amp;#10;    run_anim = false;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;if run_anim:&amp;#10;    run_anim = False&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="pams_anim" valType="code"/>
      </CodeComponent>
      <TextComponent name="pams_text">
        <Param name="color" updates="constant" val="black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.02" valType="num"/>
        <Param name="name" updates="None" val="pams_text" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0.6, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="begin"/>
    <Routine name="beps_intro"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="0:9" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$SEQ_FILE" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="beps_trial"/>
    <LoopTerminator name="trials"/>
    <Routine name="pams_intro"/>
    <LoopInitiator loopType="TrialHandler" name="pams_trials">
      <Param name="Selected rows" updates="None" val="9:25" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$SEQ_FILE" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="pams_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="pams_trial"/>
    <LoopTerminator name="pams_trials"/>
  </Flow>
</PsychoPy2experiment>
